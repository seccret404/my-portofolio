// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (title, description, start_date, end_date, image_url, stack, link_github, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, title, description, start_date, end_date, image_url, stack, link_github, user_id, created_at
`

type CreateProjectParams struct {
	Title       string
	Description string
	StartDate   sql.NullTime
	EndDate     sql.NullTime
	ImageUrl    sql.NullString
	Stack       sql.NullString
	LinkGithub  sql.NullString
	UserID      uuid.NullUUID
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.Title,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.ImageUrl,
		arg.Stack,
		arg.LinkGithub,
		arg.UserID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.ImageUrl,
		&i.Stack,
		&i.LinkGithub,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listProjectsByUser = `-- name: ListProjectsByUser :many
SELECT id, title, description, start_date, end_date, image_url, stack, link_github, user_id, created_at FROM projects WHERE user_id = $1
`

func (q *Queries) ListProjectsByUser(ctx context.Context, userID uuid.NullUUID) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjectsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.ImageUrl,
			&i.Stack,
			&i.LinkGithub,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
